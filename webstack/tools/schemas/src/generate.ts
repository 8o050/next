/**
 * Copyright (c) SAGE3 Development Team
 *
 * Distributed under the terms of the SAGE3 License.  The full license is in
 * the file LICENSE, distributed as part of this software.
 *
 */
import * as path from 'path';
import zodToJsonSchema from 'zod-to-json-schema';
// @ts-ignore
import { JSONSchemaMarkdown } from 'json-schema-md-doc';

import * as fs from 'fs';

// Import SAGE3 schemas
import { SBSchema } from '../../../libs/shared/src/lib/types/schemas';
// Import an app
import { schema } from '../../../libs/applications/src/lib/apps/Stickie/';

// TS type for sagebase
const SAGEschema = SBSchema.extend({ data: schema });

const app = 'Stickie';

const jsonSchema = zodToJsonSchema(SAGEschema, {
  name: app,
  target: 'jsonSchema7',
});

class SAGE3Doc extends JSONSchemaMarkdown {
  footer = '';
  constructor() {
    super();
    this.footer = 'Generated by SAGE3';
  }
  load(schema: any) {
    super.load(schema);
  }
  generate() {
    return super.generate();
  }
  writePath(level: number, path: string) {
    // super.writePath(level, path);
  }
  writeAdditionalItems(bool: boolean, level: number) {
    if (super.notEmpty(bool)) {
      if (bool) {
        // this.writeLine('This schema <u>does not</u> accept additional items.', level);
      } else {
        super.writeLine('This schema accepts additional items.', level);
      }
    }
  }
  writeAdditionalProperties(bool: boolean, level: number) {
    if (super.notEmpty(bool)) {
      if (!bool) {
        // this.writeLine("This schema <u>does not</u> accept additional properties.", level);
      } else {
        super.writeLine('This schema accepts additional properties.', level);
      }
    }
  }
}

const folder = 'output';
fs.writeFile(path.join(folder, app + '-schema.json'), JSON.stringify(jsonSchema, null, 2), (err) => {
  if (err) throw err;
  console.log('Spec saved: app' + '-schema.json');

  // create an instance of JSONSchemaMarkdown
  const genmd = new SAGE3Doc();
  // load the schema
  genmd.load(jsonSchema);
  // generate the markdown
  fs.writeFile(path.join(folder, app + '.md'), genmd.generate(), (err) => {
    if (err) throw err;
    console.log('Doc saved: ' + app + '.md');
  });
});
